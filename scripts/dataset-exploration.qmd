---
title: Prediction of CRE Promoter-Enhancer Potential via Machine Learning
format: html
---

# Introduction

Contrary to classical dictotomy of activating cis-regulatory elements (CREs) such as 
promoters and enhancers, recent bibliography suggests an architecture shared between 
both: bidirectional transcription inside the same nucleosome depleted regions (NDRs) 
with the potential to enhance transcription of nearby located (up to 1Mb) genes.

For this we will gather data from different sources (databases) such as: GeneHancer  
(mainly), FANTOM5, ENCODE, EPD and RefSeq. 

Description of each database:

* GeneHancer:

	+ Around 251K elements: 251 195
	+ Assembly: hg38
	+ Last update: 2018-09 
	+ Retrieved from: genome.ucsc.edu

* Eukaryotic Promoter Database (EPD):

	+ Around  29K elements:  29 598
	+ Assembly: hg38
	+ Last update: 2018-05
	+ Retrieved from: epd.expasy.org

* ENCODE Candidate Cis-Regulatory Elements (ENCODE cCREs):

	+ Around 926K elements: 926 535
	+ Assembly: hg38
	+ Last update: 2020-05 
	+ Retrieved from: genome.ucsc.edu

* RefSeq Functional Elements (RefSeq FuncElems):
	+ Exactly 134 elements (both promoters and enhancers)
	+ Assembly: hg38
	+ Last update: 
	+ Retrieved from genome.ucsc.edu

```{bash}
function enha_prom_filter {
awk -F "\t" '
{
	if ($'$1' ~ /enhancer/ || $'$1' ~ /promoter/)
	{
		if (!$11)
		{
			print $1,";",$10,";","no-note",";",$12;
		}
		else
		{
			print $1,";", $10,";","has-note",";",$12;
		}
	}
}
' "$2"
}

enha_prom_filter 4 ../datasets/RefSeq_FuncElems_chr1.tsv
```


```{bash}
print_something () {
	echo "Hello I'm a function"
}

print_something
```


```{bash}
# This chunk alone can't relate to the previously defined function
# (unlike the chunks of python and r)
# enha_prom_filter 4 RefSeq_FuncElems_chr1.tsv
```


```{python} 
def hello():
  print("Hello world")
```

```{bash}
#bash ~/Scripts/quality-seqfilter-awk.sh ~/XX01tiles_DEE1.fastq
echo "hello"
```

This is how we call it:

```{python} 
hello()
```

We can press `gd` to go to its definition.

Let's demonstrate the autocompletion:

```{python} 
import numpy as np
import matplotlib.pyplot as plt
```

And code hovers with `K`.

# Furthermore

And then we can work on integrating this for multiple 
languages in the same document, like this R function:

```{r} 
hello_from_r <- function() {
  print("hello")
}
```

hola como estas

```{bash}
list1=(AB CD FG)
list2=(12 34 56)

for i in 0 1 2;
do
	echo "${list1[i]} ${list2[i]}" 
done

echo ${list1[*]}
echo ${list2[*]}

unset list1
unset list2
```

Unsurprisingly, the function does the same thing:


```{r}
hello_from_r()
```


```{r}
library(tidyverse)
```

```{python}
hello()
```


```{python}
r = np.arange(0, 2, 0.01)
theta = 2 * np.pi * r
fig, ax = plt.subplots(
  subplot_kw = {'projection': 'polar'} 
)
ax.plot(theta, r);
ax.set_rticks([0.5, 1, 1.5, 2]);
ax.grid(True);
plt.show()
```


```{bash}
list1=(AB CD FG)
list2=(12 34 56)

for i in 0 1 2;
do
	echo "${list1[i]} ${list2[i]}" 
done

echo ${list1[*]}
echo ${list2[*]}

unset list1
unset list2
```


