source('scripts/genome-functions.R')
source('scripts/genome-functions.R')
#func_per_windows()
kmer_windows(palindromeseq, k=3)
k3_palseq
func_per_windows(windows=k3_palseq, func=tm_len_lt14)
func_per_windows(windows=k3_palseq, func=shannon_entropy)
all_k3
func_per_windows(windows=all_k3, func=shannon_entropy)
func_per_windows(windows=all_k3, func=tm_len_lt14)
if(k3_palseq_counts)
is.true(k3_palseq_counts)
isTRUE(k3_palseq_counts)
func_per_windows(windows=k3_palseq_counts[k3_palseq_counts>0], func=shannon_entropy)
func_per_windows(windows=k3_palseq_counts[k3_palseq_counts > 0], func=shannon_entropy)
k3_palseq_counts[k3_palseq_counts > 0]
positive_counts <- k3_palseq_counts[k3_palseq_counts > 0]
func_per_windows(windows=positive_counts, func=shannon_entropy)
func_per_windows(windows=names(positive_counts), func=shannon_entropy)
rm(positive_counts)
func_per_windows(windows=names(k3_palseq_counts[k3_palseq_counts > 0]), func=shannon_entropy)
k3_palseq_counts[k3_palseq_counts > 0] * func_per_windows(windows=names(k3_palseq_counts[k3_palseq_counts > 0]), func=shannon_entropy)
k3_palseq_counts * func_per_windows(windows=names(k3_palseq_counts), func=shannon_entropy) * func_per_windows(windows=names(k3_palseq), func=tm_len_lt14)
k3_palseq_counts * func_per_windows(windows=names(k3_palseq_counts), func=shannon_entropy) * func_per_windows(windows=names(k3_palseq_counts), func=tm_len_lt14)
prod_k3 <- k3_palseq_counts * func_per_windows(windows=names(k3_palseq_counts), func=shannon_entropy) * func_per_windows(windows=names(k3_palseq_counts), func=tm_len_lt14)
prod_k3[prod_k3 > 0]
k3_palseq_counts[k3_palseq_counts > 0]
prod2_k3 <- func_per_windows(windows=names(k3_palseq_counts), func=shannon_entropy) * func_per_windows(windows=names(k3_palseq_counts), func=tm_len_lt14)
prod2_k3
prod2_k3
factor(prod2_k3)
table(prod2_k3)
factor(prod_k3)
factor(prod_k3[prod_k3>0])
table(prod_k3)
table(prod2_k3)
#prod2_k3 <- func_per_windows(windows=names(k3_palseq_counts), func=shannon_entropy) * func_per_windows(windows=names(k3_palseq_counts), func=tm_len_lt14)
table(func_per_windows(windows=names(k3_palseq_counts), func=shannon_entropy))
table(func_per_windows(windows=names(k3_palseq_counts), func=tm_len_lt14))
table(func_per_windows(windows=names(k3_palseq_counts), func=shannon_entropy) * func_per_windows(windows=names(k3_palseq_counts), func=tm_len_lt14))
table(prod_k3)
#k3_palseq_percs <- count_kmers(palindromeseq, k=3, percentage=TRUE)
count_kmers(palindromeseq, k=3, percentage=TRUE)
count_kmers(palindromeseq, k=3)
source('scripts/genome-functions.R')
count_kmers(palindromeseq, k=3, percentage=TRUE)
k3_palseq_percs <- count_kmers(palindromeseq, k=3, percentage=TRUE)
prodperc_k3 <- k3_palseq_percs * func_per_windows(windows=names(k3_palseq_percs), func=shannon_entropy) * func_per_windows(windows=names(k3_palseq_percs), func=tm_len_lt14)
prodperc_k3
prod_k3
table(prodperc_k3)
table(prod_k3)
kmer_interspace_polynome(windows=k3_bigseq, kmer="AGG", silent=TRUE)
kmer_interspace_polynome(windows=k3_bseq, kmer="AGG", silent=TRUE)
kmer_interspace_polynome(windows=k3_palseq, kmer="GTT", silent=TRUE, fixed=TRUE, case=2, subcase=10)
source('scripts/trash-code.R')
kmer_interspace_polynome(windows=k3_ghseq1, kmer="AGG", silent=TRUE)
combi_kmers(k=3)
func_per_windows(windows=names(k3_palseq_percs), func=isPalindrome)
k3_ghseq1
k3_ghseq1_counts
kmer_interspace_polynome(windows=k3_ghseq1, kmer="CTC", silent=TRUE)
kmer_interspace_polynome(windows=k3_ghseq1, kmer="CTC", silent=TRUE, aem_option=7)
kmer_interspace_polynome(windows=k3_ghseq1, kmer="CTC", silent=TRUE)
comb_cases(k=4, coss=TRUE)
comb_cases(k=6, coss=TRUE, print=FALSE)
trig_cases$caseName[trig_cases$peakNum == 3]
head(trig_cases)
trig_cases
coscases <- comb_cases(k=8, coss=TRUE, print=FALSE)
coscases$caseName[coscases$peakNum == 3]
cossincases <- comb_cases(k=10, coss=TRUE, sin=TRUE, print=FALSE)
coscases$caseName[coscases$peakNum == 3]
cossincases$caseName[cossincases$peakNum == 3]
cossincases$caseName[cossincases$peakNum == 5]
kmer_interspace_polynome(windows=k3_ghseq1, kmer="CTC", silent=TRUE)
cossincases$caseName
cossincases <- comb_cases(k=12, coss=TRUE, sin=TRUE, print=FALSE)
cossincases[cossincases$caseName == "c2+s6"]
cossincases[,cossincases$caseName == "c2+s6"]
cossincases[cossincases$caseName == "c2+s6",]
#k3_palseq_percs <- count_kmers(palindromeseq, k=3, percentage=TRUE)
source('scripts/genome-functions.R')
count_kmers(palindromeseq, k=3, percentage=TRUE)
length(kmer_windows(palindromeseq, k=3))
kmer_windows(palindromeseq, k=3)
count_kmers(palindromeseq, k=3)
sum(count_kmers(palindromeseq, k=3))
4/62
source('scripts/genome-functions.R')
count_kmers(palindromeseq, k=3, percentage=TRUE)
sapply(k3_palseq, kmer_barcode, windows=k3_palseq, simpify=TRUE)
sapply(k3_palseq, kmer_barcode, windows=k3_palseq, simplify=TRUE)
sapply(FUN= kmer_barcode, kmer=k3_palseq, windows=k3_palseq, simplify=TRUE)
sapply(FUN= kmer_barcode(kmer=k3_palseq, windows=k3_palseq), simplify=TRUE)
sapply(kmer=k3_palseq, kmer_barcode, windows=k3_palseq, simplify=TRUE)
sapply(kmer=k3_palseq,FUN= kmer_barcode, windows=k3_palseq, simplify=TRUE)
#mapply(kmer_barcode,kmer= windows=k3_palseq, simplify=TRUE)
#sapply(k3_palseq, function(x) = kmer_barcode(kmer = x, windows = k3_palseq), windows=k3_palseq, simplify=TRUE)
#sapply(k3_palseq, function(x) = kmer_barcode(kmer = x, windows = k3_palseq), simplify=TRUE)
sapply(k3_palseq, function(x) = kmer_barcode(kmer = x, windows = k3_palseq), simplify=TRUE)
sapply(k3_palseq, function(x) kmer_barcode(kmer = x, windows = k3_palseq), simplify=TRUE)
kmer_barcode(kmer = "TGT", windows= k3_palseq)
kmer_barcode(kmer= "TGT", windows= k3_palseq, option= "log-prime")
kmer_barcode(kmer= "TGT", windows= k3_palseq, option= "log-primes")
kmer_barcode(kmer= "TGT", windows= k3_palseq, option= "primes")
kmer_barcode(kmer= "TGT", windows= k3_palseq, option= "logprimes")
kmer_barcode(kmer= "AAA", windows= k3_palseq, option= "logprimes")
kmer_barcode(kmer= "AAA", windows= k3_palseq)
sapply(k3_palseq, function(x) kmer_barcode(kmer = x), windows = k3_palseq, simplify=TRUE)
sapply(all_k3, function(x) kmer_barcode(kmer = x), windows = k3_palseq, simplify=TRUE)
sapply(all_k3, function(x) kmer_barcode(kmer = x, windows = k3_palseq), simplify=TRUE)
source('scripts/genome-functions.R')
source('scripts/genome-functions.R')
source('scripts/genome-functions.R')
func_per_windows(kmers = all_k3, windows = k3_palseq, func = kmer_barcode)
k2_palseq <- kmer_windows(palindromeseq, k=2)
k2_palseq_counts <- count_kmers(palindromeseq, k=2)
k2_palseq_counts
sum(k2_palseq_counts)
func_per_windows(windows=k2_palseq, func=tm_len_lt14)
func_per_windows(windows=k2_palseq, func=shannon_entropy)
func_per_windows(windows=k3_palseq, func=shannon_entropy)
all_k2 <- combi_kmers(k=2)
func_per_windows(windows=all_k3, func=shannon_entropy)
func_per_windows(windows=all_k6, func=shannon_entropy)
table(func_per_windows(windows=all_k6, func=shannon_entropy))
log(0)
41^0
1^0.6
1.1^0.6
1.1^0.65
1.1^0.650024
1.01^0.650024
table(func_per_windows(windows=all_k6, func=tm_len_lt14))
1.1^1.9182
bases_count(palindromeseq)
bases_percentage(palindromeseq)
func_per_windows(windows=k2_palseq, func=shannon_entropy)
func_per_windows(windows=all_k2, func=shannon_entropy)
func_per_windows(windows=all_k2, func=tm_len_lt14)
func_per_windows(windows=c("A","T","C","G"), func=tm_len_lt14)
func_per_windows(windows=all_k3, func=shannon_entropy)
func_per_windows(windows=all_k3, func=tm_len_lt14)
vectorx <- func_per_windows(windows=all_k3, func=tm_len_lt14)
assign("name", vectorx[4])
vectorx
listx <- list(vec1=c(1,2,3), vec2=c(3,4,5), vec3=c(5,6,7))
listx
assign("name", listx[[2]])
listx
name(listx[[2]])
names(listx[[2]])
names(listx)
names(listx)[2]
assign("name", names(listx)[2])
names(listx)
listx
names(listx)[2] <- "name2"
listx
names(vectorx) <- "name2"
vectorx
source('scripts/genome-functions.R')
sequence_characterizer(palindromeseq, k=3)
source('scripts/genome-functions.R')
sequence_characterizer(palindromeseq, k=3)
#                        barc = list(), pals = list(), revc = list()
tm_len_mt13(palindromeseq)
shannon_entropy(palindromeseq)
source('scripts/genome-functions.R')
sequence_characterizer(palindromeseq, k=3)
sequence_characterizer(palindromeseq, k=4)
sequence_characterizer(gh_seq1, k=4)
gh1_characts <- sequence_characterizer(gh_seq1, k=4)
gh1_characts$k4$revc$AAAA
gh1_characts$k4$revc["AATT"]
gh1_characts$k4$["AATT"]
gh1_characts$k4$all["AATT"]
gh1_characts$k4[[]]["AATT"]
gh1_characts$k4[[1:]]["AATT"]
gh1_characts$k4[[1:4]]["AATT"]
gh1_characts$k4[,"AATT"]
gh1_characts$k4[[*]]["AATT"]
gh1_characts$k4[]["AATT"]
gh1_characts$k4[:]["AATT"]
gh1_characts$k4[1:]["AATT"]
gh1_characts$k4[1:3]["AATT"]
lapply(gh1_characts$k4, `[[`, 1)
lapply(gh1_characts$k4, `[[`, "AATT")
lapply(gh1_characts[[4]], `[[`, "AATT")
func_per_windows(windows = all_k3, func = gc_percentage)
source('scripts/genome-functions.R')
func_per_windows(windows = all_k3, func = gc_percentage)
source('scripts/genome-functions.R')
func_per_windows(windows = all_k3, func = gc_percentage)
source('scripts/genome-functions.R')
func_per_windows(windows = all_k3, func = gc_percentage)
source('scripts/genome-functions.R')
sequence_characterizer(gh_seq1, k=4)
listx
listx <- list(c(1,2,3), c(3,4,5), c(5,6,7))
listx
listx <- list(1=c(1,2,3), 2=c(3,4,5), 3=c(5,6,7))
listx <- list("1"=c(1,2,3), "2"=c(3,4,5), "3"=c(5,6,7))
listx
listx$1
library(microbenchmark)
library(purrr)
#microbenchmark(lapply())
microbenchmark(lapply(listx, `[[`, 1), map(listx, 1), times=1000000)
microbenchmark(lapply(listx, `[[`, 1), map(listx, 1), times=1000)
microbenchmark(lapply(listx, `[[`, 1), map(listx, 1), times=10000)
detach("package:purrr", unload=TRUE)
#sequence_characterizer(gh_seq1, k=4)
names(gh1_characts)
names(gh1_characts[[4]])
names(gh1_characts[[4]][[4]])
names(gh1_characts[[4]][[4]][2])
substitute(gh1_characts[[4]][[4]][2])
deparse(substitute(gh1_characts[[4]][[4]][2]))
deparse(substitute(gh1_characts[[4]]$barc[2]))
gh1_characts[[4]]$barc[2]
gh1_characts[[4]]$barc[5]
gh1_characts[[4]]$temp[5]
paste(c(2,3), list(c(1:4^2), c(1:4^3)))
1:4^2
paste(c(2,3), list(1:4^2, 1:4^3))
paste(2, 1:4^2)
mapply(paste, 2:3, list(1:4^2,1:4^3))
mapply(paste, 2:3, list(1:4^2,1:4^3), sep="-")
mapply(paste, 2:3, list(1:4^2,1:4^3), c("prod", "barc", "pals"), sep="-")
paste(mapply(paste, 2:3, list(1:4^2,1:4^3), sep="-"), c("prod", "barc", "pals"), sep=".")
as.vector(mapply(paste, 2:3, list(1:4^2,1:4^3), sep="-"))
as.vector(mapply(paste, 2:3, list(1:4^2,1:4^3), sep="-")[[]])
mapply(paste, 2:3, list(1:4^2,1:4^3), sep="-", simplify=TRUE)
mapply(paste, 2:3, mapply(list(1:4^2,1:4^3), c("prod","barc","pals")), sep="-")
mapply(paste, 2:3, mapply(paste,list(1:4^2,1:4^3), c("prod","barc","pals")), sep="-")
mapply(paste, 2:3, mapply(paste,list(1:4^2,1:4^3), list(c("prod","barc","pals"), c("prod","barc","pals"))), sep="-")
paste(mapply(paste, 2:3, list(1:4^2,1:4^3), sep="-")[[1]], c("prod","barc","pals"))
mapply(paste, 2:3, list(1:4^2,1:4^3), sep="-")
expand.grid(mapply(paste, 2:3, list(1:4^2,1:4^3), sep="-"), c("prod","barc","pals"))
unlist(mapply(paste, 2:3, list(1:4^2,1:4^3), sep="-"))
expand.grid(unlist(mapply(paste, 2:3, list(1:4^2,1:4^3), sep="-")), c("prod","barc","pals"))
expand.grid(c("prod","barc","pals"), unlist(mapply(paste, 2:3, list(1:4^2,1:4^3), sep="-")))
paste(expand.grid(c("prod","barc","pals"), unlist(mapply(paste, 2:3, list(1:4^2,1:4^3), sep="-"))))
apply(expand.grid(c("prod","barc","pals"), unlist(mapply(paste, 2:3, list(1:4^2,1:4^3), sep="-")), 1, paste, collape=".")
)
apply(expand.grid(c("prod","barc","pals"), unlist(mapply(paste, 2:3, list(1:4^2,1:4^3), sep="-"))), 1, paste, collape=".")
apply(expand.grid(c("prod","barc","pals"), unlist(mapply(paste, 2:3, list(1:4^2,1:4^3), sep="-"))), 2, paste, collape=".")
kas <- unlist(mapply(paste, 2:3, list(1:4^2,1:4^3), sep="-"))
kas
#kas_fgrid <- 
kas_fgrid <- expand.grid(c("prod","barc","pals"), unlist(mapply(paste, 2:3, list(1:4^2,1:4^3), sep="-")))
apply(kas_fgrid, 2, paste, collape=".")
apply(kas_fgrid, 2, paste)
apply(kas_fgrid, 1, paste)
kas_fgrid[,1]
kas_fgrid[,2]
paste(kas_fgrid[,2], kas_fgrid[,1], sep=".")
#kas_fgrid2 <- expand.grid(c("prod","barc","pals"), 2:3, NONONOc(1:4^2,1:4^3), sep="-")))
expand.grid(c("prod","barc","pals"), 2, 1:4^2)
expand.grid(2, 1:4^2,c("prod","barc","pals"))
head(expand.grid(c("prod","barc","pals"), 2, 1:4^2))
unlist(gh1_characts)
lapply(gh1_characts$k4, `[[`, 1)
unlist(lapply(gh1_characts$k4, `[[`, 1))
vectorx <- unlist(lapply(gh1_characts$k4, `[[`, 1))
#names(vectorx) <- paste("k",1,1,names(vectorx))
paste("k",1,1,names(vectorx))
#names(vectorx) <- paste("k", 1, "-", 1, ".", names(vectorx), sep = "")
names(vectorx) <- paste("k", 1, "-", 1, ".", names(vectorx), sep = "")
vectorx
lapply(gh1_characts$k4, `[[`, 1, simplify = TRUE)
#sequence_characterizer(gh_seq1, k=4, as_vect)
source('scripts/genome-functions.R')
source('scripts/genome-functions.R')
sequence_characterizer(gh_seq1, k=4)
source('scripts/genome-functions.R')
sequence_characterizer(gh_seq1, k=4, as_vector=FALSE)
sequence_characterizer(gh_seq1, k=4)
source('scripts/genome-functions.R')
sequence_characterizer(gh_seq1, k=4)
sequence_characterizer(gh_seq1, k=4, as_vector=FALSE)
sequence_characterizer(gh_seq1, k=4)
source('scripts/genome-functions.R')
sequence_characterizer(gh_seq1, k=4)
source('scripts/genome-functions.R')
sequence_characterizer(gh_seq1, k=4)
source('scripts/genome-functions.R')
sequence_characterizer(gh_seq1, k=4)
sequence_characterizer(gh_seq1, k=4, optim = TRUE)
sequence_characterizer(gh_seq1, k=3, optim = TRUE)
source('scripts/genome-functions.R')
sequence_characterizer(gh_seq1, k=3, optim = TRUE)
source('scripts/genome-functions.R')
sequence_characterizer(gh_seq1, k=3, optim = TRUE)
listx <- list()
listx <- append(listx, c())
listx
listx <- append(listx, c())
listx
listx[[1]] <- c(1)
listx[[2]] <- c(2)
listx[[3]] <- c(3)
listx
listx <- list()
listx[[1]] <- append(listx[[1]], c(1))
listx <- append(listx, c())
listx[[1]] <- append(listx[[1]], c(1))
listx <- append(listx, c(1))
listx
listx <- append(listx, c(2))
listx
listx[[1]] <- append(listx[[1]], c(1.5))
listx
listx <- list()
listx[[1]] <- append(listx[[1]], NULL)
listx <- append(listx, NULL)
listx <- append(listx, NULL)
listx <- append(listx, NULL)
listx
listx <- append(listx,name1= NULL)
listx <- append(listx,"name1"= NULL)
names(listx)[1] <- "name1"
listx <- append(listx, NA)
listx
listx <- list()
listx <- append(listx, numeric())
listx
listx <- append(listx, numeric())
listx <- append(listx, numeric())
listx <- append(listx, numeric())
listx
listx <- list(name1 = numeric())
listx
listx <- list()
listx <- append(listx, numeric(0))
listx
emptyvec <- numeric(o)
emptyvec <- numeric(0)
emptyvec
listx <- append(listx, emptyvec)
listx <- append(listx, emptyvec)
listx <- append(listx, emptyvec)
listx
listx <- vector(mode = "list", length = 10)
listx
sequence_characterizer(gh_seq1, k=3, optim = TRUE)
length(sequence_characterizer(gh_seq1, k=3, optim = TRUE))
16 + 64
(16 + 64) * 4
(16 * 4) + (64 * 4)
listx <- vector(mode = "list", length = 326)
#lapply(1:326, function(i) listx[[i]] <- )
gh1_vcharacs <- sequence_characterizer(gh_seq1, k=3, optim = TRUE)
lapply(1:326, function(i) listx[[i]] <- append(listx[[i]], gh1_vcharacs[i]))
gh_seq2 <- gh_1000seqs[2]
gh2_vcharacs <- sequence_characterizer(gh_seq2, k=3, optim = TRUE)
lapply(1:326, function(i) listx[[i]] <- append(listx[[i]], gh2_vcharacs[i]))
listx
#lapply(1:326, function(i) listx[[i]] <- append(listx[[i]], gh2_vcharacs[i]))
source('scripts/genome-functions.R')
#sequences_characterizer(gh_1000seqs[])
gh_1000seqs[1:3]
sequences_characterizer(gh_1000seqs[1:3], k_max=3, optim=TRUE)
source('scripts/genome-functions.R')
sequences_characterizer(gh_1000seqs[1:3], k_max=3, optim=TRUE)
source('scripts/genome-functions.R')
sequences_characterizer(gh_1000seqs[1:3], k_max=3, optim=TRUE, as_df=TRUE)
sequences_characterizer(gh_1000seqs[1:10], k_max=3, optim=TRUE, as_df=TRUE)
sequences_characterizer(gh_1000seqs, k_max=3, optim=TRUE, as_df=TRUE)
sequences_characterizer(gh_1000seqs, k_max=4, optim=TRUE, as_df=TRUE)
sequences_characterizer(gh_1000seqs[1:10], k_max=3, optim=TRUE, as_df=TRUE)
sequences_characterizer(gh_1000seqs[1:10], k_max=4, optim=TRUE, as_df=TRUE)
sequences_characterizer(gh_1000seqs[1:10], k_max=6, optim=TRUE, as_df=TRUE)
sequences_characterizer(gh_1000seqs[1:10], k_max=5, optim=TRUE, as_df=TRUE)
all_k6[isPalindrome(all_k6)]
q('yes')
library(systemfonts)
unique(sort(system_fonts()$family))
q('yes')
source('scripts/genome-functions.R')
ls()
testseq1
testseq3
shannon_entropy(all_k3)
all_k3
shannon_entropy("AAA")
shannon_entropy("AAT")
func_per_windows()
func_per_windows
func_per_windows(windows=all_k3, func=shannon_entropy)
table+(func_per_windows(windows=all_k3, func=shannon_entropy))
table(func_per_windows(windows=all_k3, func=shannon_entropy))
table(func_per_windows(windows=all_k4, func=shannon_entropy))
table(func_per_windows(windows=all_k5, func=shannon_entropy))
table(func_per_windows(windows=all_k6, func=shannon_entropy))
all_k7 <- combi_kmers(k=7)
table(func_per_windows(windows=all_k7, func=shannon_entropy))
func_per_windows(windows=all_k4, func=shannon_entropy)
table(func_per_windows(windows=all_k4, func=shannon_entropy))
table(func_per_windows(windows=all_k4, func=gc_percentage))
sort(func_per_windows(windows=all_k4, func=gc_percentage)))
sort(func_per_windows(windows=all_k4, func=gc_percentage))
sort(func_per_windows(windows=all_k3, func=gc_percentage))
sort(func_per_windows(windows=all_k3, func=shannon_entropy))
sort(func_per_windows(windows=all_k3, func=ksg_product))
source("scripts/genome-functions.R")
sort(func_per_windows(windows=all_k3, func=ksg_product))
source("scripts/genome-functions.R")
sort(func_per_windows(windows=all_k3, func=ksg_product))
source("scripts/genome-functions.R")
sort(func_per_windows(windows=all_k3, func=ksg_product))
source("scripts/genome-functions.R")
sort(func_per_windows(windows=all_k3, func=ksg_product))
func_per_windows(kmers = all_k3, windows = k3_bseq, func = ksg_product)
source("scripts/genome-functions.R")
func_per_windows(kmers = all_k3, windows = k3_bseq, func = ksg_product)
func_per_windows(kmers = all_k3, func = shannon_entropy)
func_per_windows(windows = all_k3, func = shannon_entropy)
func_per_windows(windows = all_k3, func = gc_percentage)
log(func_per_windows(windows = all_k3, func = gc_percentage))
log(func_per_windows(windows = all_k3, func = gc_percentage),2)
log2(func_per_windows(windows = all_k3, func = gc_percentage))
exp(func_per_windows(windows = all_k3, func = gc_percentage))
exp(func_per_windows(windows = all_k3, func = shannon_entropy))
exp_sh_ak3 <- exp(func_per_windows(windows = all_k3, func = shannon_entropy))
exp(func_per_windows(windows = all_k3, func = gc_percentage))
exp_sh_ak3 * exp_gc_ak3
table(exp_sh_ak3 * exp_gc_ak3)
big_seq
shannon_entropy(big_seq)
shannon_entropy(gh_1000seqs[1:10])
func_per_windows(gh_1000seqs[1:10], func = shannon_entropy)
func_per_windows(gh_1000seqs[1:10], func=shannon_entropy)
func_per_windows(windows = gh_1000seqs[1:10], func=shannon_entropy)
func_per_windows(windows=gh_1000seqs[1:3], func=shannon_entropy)
log(func_per_windows(windows=gh_1000seqs[1:3], func=shannon_entropy))
log2(func_per_windows(windows=gh_1000seqs[1:3], func=shannon_entropy))
table(exp_sh_ak3 * exp_gc_ak3)
exp_sh_ak3 * exp_gc_ak3
exp_SG_ak3 <- exp_sh_ak3 * exp_gc_ak3
exp_SG_ak3[which(exp_SG_ak3 > 4 & exp_SG_ak3 < 9)]
exp_SG_ak3[which(exp_SG_ak3 > 5 & exp_SG_ak3 < 9)]
log2(func_per_windows(windows = all_k3, func = shannon_entropy))
func_per_windows(windows = all_k3, func = shannon_entropy)
log1p(func_per_windows(windows = all_k3, func = shannon_entropy))
cos(func_per_windows(windows = all_k3, func = shannon_entropy))
sin(func_per_windows(windows = all_k3, func = shannon_entropy))
sin_sh_ak3 <- sin(func_per_windows(windows = all_k3, func = shannon_entropy))
table(sin(func_per_windows(windows = all_k3, func = shannon_entropy)))
table(cos(func_per_windows(windows = all_k3, func = shannon_entropy)))
cos_sh_ak3 <- cos(func_per_windows(windows = all_k3, func = shannon_entropy))
table(cospi(func_per_windows(windows = all_k3, func = shannon_entropy)))
coex_SG_ak3 <- cos_sh_ak3 * exp_gc_ak3
coex_SG_ak3[which(coex_SG_ak3 > 5 & coex_SG_ak3 < 9)]
table(coex_SG_ak3)
table(exp_SG_ak3)
coex_SG_ak3[which(coex_SG_ak3 > 1 & coex_SG_ak3 < 1.5)]
coex_SG_ak3[which(coex_SG_ak3 > -0.03 & coex_SG_ak3 < -0.02)]
coex_SG_ak3[which(coex_SG_ak3 > -0.02 & coex_SG_ak3 < 1)]
coex_SG_ak3[which(coex_SG_ak3 > -0.02 & coex_SG_ak3 < 0.5)]
coex_SG_ak3[which(coex_SG_ak3 > -0.02 & coex_SG_ak3 < 0.5)]
table(coex_SG_ak3)
table(coex_SG_ak3)
table(coex_SG_ak3)
coex_SG_ak3[which(coex_SG_ak3 > -0.03 & coex_SG_ak3 < -0.02)]
coex_SG_ak3[which(coex_SG_ak3 > -0.02 & coex_SG_ak3 < 0.5)]
coex_SG_ak3[which(coex_SG_ak3 > 0.5 & coex_SG_ak3 < 0.8)]
coex_SG_ak3[which(coex_SG_ak3 > 0.8 & coex_SG_ak3 < 1)]
coex_SG_ak3[which(coex_SG_ak3 == 1)
coex_SG_ak3[which(coex_SG_ak3 == 1)
]
coex_SG_ak3[which(coex_SG_ak3 > 1 & coex_SG_ak3 < 1.2)]
coex_SG_ak3[which(coex_SG_ak3 > 1.2 & coex_SG_ak3 < 1.6)]
coex_SG_ak3[which(coex_SG_ak3 > 1.2 & coex_SG_ak3 < 1.7)]
table(exp_sh_ak3)
table(exp_gc_ak3)
table(func_per_windows(windows=all_k3, func=shannon_entropy))
table(func_per_windows(windows=all_k3, func=gc_percentage))
exp_gc_ak3
cos_gc_ak3 <- cos(func_per_windows(windows = all_k3, func = gc_percentage))
table(exp_sh_ak3 * cos_gc_ak3)
table(coex_SG_ak3)
table(cos_sh_ak3 * cos_gc_ak3)
table(exp_sh_ak3 * exp_gc_ak3)
table(exp_sh_ak3)
table(exp_gc_ak3)
table(cos_sh_ak3)
table(cos_gc_ak3)
cos(0)
2.50501778435487 * 1.39561242508609 
exp_sh_ak3[1]
table(exp_sh_ak3)[1]
table(exp_sh_ak3)[1] > 1
names(table(exp_sh_ak3))[1] > 1
names(table(exp_sh_ak3))[1] * names(table(exp_gc_ak3))
names(table(exp_gc_ak3))
names(table(exp_sh_ak3))[1] * as.numeric(names(table(exp_gc_ak3)))
as.numeric(names(table(exp_sh_ak3))[1]) * as.numeric(names(table(exp_gc_ak3)))
as.numeric(names(table(exp_sh_ak3))[2]) * as.numeric(names(table(exp_gc_ak3)))
as.numeric(names(table(exp_sh_ak3))[3]) * as.numeric(names(table(exp_gc_ak3)))
table(exp_sh_ak3)
table(exp_gc_ak3)
table(func_per_windows(windows=all_k3, func=shannon_entropy))
table(func_per_windows(windows=all_k4, func=shannon_entropy))
table(func_per_windows(windows=all_k5, func=shannon_entropy))
all_k8 <- combi_kmers(k=8)
table(func_per_windows(windows=all_k8, func=shannon_entropy))
table(func_per_windows(windows=all_k7, func=shannon_entropy))
table(func_per_windows(windows=all_k2, func=shannon_entropy))
q('yes')
