vec1 <- [1,2,3]
vec1 <- c(1,2,3)
vec2 <- c(1,2,3,4,5)
vec1 + vec1
vec1 + vec2
q(
)
q()
a <- c(1,2,3)
b <- c(1,2,3)
a*b
a %*% b
a %*% a
x <- expand.grid(rep(list(c("A","T","C","G")),2))
x
do.call(paste0, x)
list(c("A","T","C","G"))
list("A","T","C","G")
library(stringr)
library(stringi)
# seq <- "gtatgggaatcagccgggtctcactatgtgcaaaggagattcggtcgtgtggtacttattcag"
seq <- "gtatgggaat"
sequence <- toupper(seq)
bases_vector <- c("A", "T", "C", "G")
base_count <- function(sequence, bases = c("A", "T", "C", "G")) {
  return(str_count(sequence, bases))
}
gc_percentage <- function(sequence, bases = c("A", "T", "C", "G")) {
  return(base_count(sequence) / str_length(sequence))
}
highlight_base <- function(sequence, base) {
  BASE <- toupper(base)
  base <- tolower(base)
  sequence <- tolower(sequence)
  return(gsub(base, BASE, sequence))
}
rev_complement <- function(sequence, bases = "ATCG", replace_bases = "TAGC") {
  return(stri_reverse(chartr(bases, replace_bases, sequence)))
}
combi_nNs <- function(bases = c("A", "T", "C", "G"), n = 2) {
  return(do.call(paste0, expand.grid(rep(list(bases, n)))))
}
count_nNs <- function(sequence, vector_nNs = combi_nNs()) {
  return(lapply(vector_nNs, str_count, var1 = sequence))
}
count_nNs(sequence)
count_nNs <- function(sequence, vector_nNs = combi_nNs()) {
  return(lapply(sequence, str_count, var2 = vector_nNs))
}
count_nNs(sequence)
combi_nNs(
)
combi_nNs <- function(bases = c("A", "T", "C", "G"), n = 2) {
  return(do.call(paste0, expand.grid(rep(list(bases), n))))
}
combi_nNs()
count_nNs(sequence)
combi_nNs(n=3)
combi_nNs(n=4)
count_nNs <- function(sequence, vector_nNs = combi_nNs()) {
  return(mapply(str_count, sequence, vector_nNs))
}
count_nNs(sequence)
combi_nNs()
seq(1,10,1)
seq(1,10,2)
seq(1,10)
c(seq(1,16))
numbers <- c(seq(1,16))
names(numbers)
names(numbers) <- combi_nNs()
numbers
rm(combi_nNs())
rm(combi_nNs)
rm(count_nNs)
combi_kmers <- function(bases = c("A", "T", "C", "G"), n = 2) {
  return(do.call(paste0, expand.grid(rep(list(bases), n))))
}
count_kmers <- function(sequence, vector_kmers = combi_kmers()) {
  return(mapply(stri_count, sequence, vector_kmers))
}
count_kmers(sequence)
count_kmers <- function(sequence, vector_kmers = combi_kmers()) {
  return(stri_count(sequence, fixed = vector_kmers))
}
count_kmers(sequence)
count_kmers <- function(sequence, vector_kmers = combi_kmers()) {
  return(stri_count_fixed(sequence, vector_kmers, overlap=TRUE))
}
count_kmers(sequence)
count_kmers <- function(sequence, vector_kmers = combi_kmers()) {
  kmer_counts <- stri_count_fixed(sequence, vector_kmers, overlap = TRUE)
  names(kmer_counts) <- vector_kmers
  return(kmer_counts)
}
count_kmers(sequence)
sequence
count_kmers(sequence,combi_kmers(n=3))
count_kmers(sequence,vector_kmers = c("GC"))
sequence = "GCGCGCGCGC"
count_kmers(sequence,vector_kmers = c("GC"))
sequence = "GCGCGCGCTATATCG"
count_kmers(sequence,vector_kmers = c("CG"))
count_kmers(sequence,vector_kmers = c("GC"))
count_kmers(sequence,vector_kmers = c("GC")))
count_kmers(sequence,combi_kmers())
rm(base_count)
rm(gc_percentage)
q()
seq <- "gtatgggaat"
sequence <- toupper(seq)
bases_vector <- c("A", "T", "C", "G")
bases_count <- function(sequence, bases = c("A", "T", "C", "G")) {
  return(str_count(sequence, bases))
}
bases_percentage <- function(sequence, bases = c("A", "T", "C", "G")) {
  return(bases_count(sequence, bases) / str_length(sequence))
}
gc_percentage <- function(sequence, bases = c("A", "T", "C", "G")) {
  base_percs <- bases_percentage(sequence, bases)
  return(base_percs[3] + base_percs[4])
}
highlight_base <- function(sequence, base) {
  BASE <- toupper(base)
  base <- tolower(base)
  sequence <- tolower(sequence)
  return(gsub(base, BASE, sequence))
}
rev_complement <- function(sequence, bases = "ATCG", replace_bases = "TAGC") {
  return(stri_reverse(chartr(bases, replace_bases, sequence)))
}
combi_kmers <- function(bases = c("A", "T", "C", "G"), n = 2) {
  return(do.call(paste0, expand.grid(rep(list(bases), n))))
}
count_kmers <- function(sequence, vector_kmers = combi_kmers()) {
  kmer_counts <- stri_count_fixed(sequence, vector_kmers, overlap = TRUE)
  names(kmer_counts) <- vector_kmers
  return(kmer_counts)
}
sequence
bases_count(sequence)
library(stringr)
library(stringi)
bases_count(sequence)
bases_percentage(sequence)
gc_percentage(sequence)
rev_complement(sequence)
combi_kmers()
combi_kmers(n=3)
count_kmers(sequence)
count_kmers(sequence, vector_kmers=combi_kmers(n=3))
count_kmers(sequence, vector_kmers=c("CG"))
count_kmers(sequence, vector_kmers=c("GG"))
count_kmers(sequence, vector_kmers=c("AT"))
kmer_windws <- function(sequence, k = 2) {
  seq_len <- str_length(sequence)
  return(str_sub(sequence, seq(1, seq_len + 1 - k), seq(k, seq_len)))
}
kmer_windws(sequence)
kmer_windws(sequence, k=3)
seq(1, str_length(sequence) - k + 1)
seq(1, str_length(sequence) - 2 + 1)
q()
library(stringr)
library(stringi)
# seq <- "gtatgggaatcagccgggtctcactatgtgcaaaggagattcggtcgtgtggtacttattcag"
seq <- "gtatgggaat"
sequence <- toupper(seq)
bases_vector <- c("A", "T", "C", "G")
bases_count <- function(sequence, bases = c("A", "T", "C", "G")) {
  base_counts <- str_count(sequence, bases)
  names(base_counts) <- bases
  return(base_counts)
}
bases_percentage <- function(sequence, bases = c("A", "T", "C", "G")) {
  base_percs <- bases_count(sequence, bases) / str_length(sequence)
  names(base_percs) <- bases
  return(base_percs)
}
gc_percentage <- function(sequence, bases = c("A", "T", "C", "G")) {
  base_percs <- bases_percentage(sequence, bases)
  return(base_percs[3] + base_percs[4])
}
highlight_base <- function(sequence, base) {
  BASE <- toupper(base)
  base <- tolower(base)
  sequence <- tolower(sequence)
  return(gsub(base, BASE, sequence))
}
rev_complement <- function(sequence, bases = "ATCG", replace_bases = "TAGC") {
  return(stri_reverse(chartr(bases, replace_bases, sequence)))
}
combi_kmers <- function(bases = c("A", "T", "C", "G"), k = 2) {
  return(do.call(paste0, expand.grid(rep(list(bases), k))))
}
count_kmers <- function(sequence, vector_kmers = combi_kmers()) {
  kmer_counts <- stri_count_fixed(sequence, vector_kmers, overlap = TRUE)
  names(kmer_counts) <- vector_kmers
  return(kmer_counts)
}
kmer_windws <- function(sequence, k = 2) {
  seq_len <- str_length(sequence)
  return(str_sub(sequence, seq(1, seq_len + 1 - k), seq(k, seq_len)))
}
tm_calc <- function(sequence, bases = c("A", "T", "C", "G")) {
  base_counts <- bases_count(sequence, bases)
  countA <- base_counts[1]
  countT <- base_counts[2]
  countC <- base_counts[3]
  countG <- base_counts[4]
  if (seq_len <= 13) {
    return(((countA + countT) * 2) + ((countC + countG) * 4))
  } else {
    return(64.9 + (41 * (countG + countC - 16.4)/(countA + countT + countC + countG)))
  }
}
tm_calc(sequence)
tm_calc <- function(sequence, bases = c("A", "T", "C", "G")) {
  base_counts <- bases_count(sequence, bases)
  seq_len <- str_length(sequence)
  countA <- base_counts[1]
  countT <- base_counts[2]
  countC <- base_counts[3]
  countG <- base_counts[4]
  if (seq_len <= 13) {
    return(((countA + countT) * 2) + ((countC + countG) * 4))
  } else {
    return(64.9 + (41 * (countG + countC - 16.4)/(countA + countT + countC + countG)))
  }
}
tm_calc(sequence)
sequence
seq <- "gtatgggaatcagccgggtctcactatgtgcaaaggagattcggtcgtgtggtacttattcag"
sequence <- toupper(seq)
sequence
tm_calc(sequence)
seq <- "gtatgggaatcagccgggtctcactatgtgcaaa"
sequence <- toupper(seq)
sequenc
sequence
tm_calc(sequence)
tm_calc <- function(sequence, bases = c("A", "T", "C", "G")) {
  base_counts <- bases_count(sequence, bases)
  seq_len <- str_length(sequence)
  countA <- base_counts[1]
  countT <- base_counts[2]
  countC <- base_counts[3]
  countG <- base_counts[4]
  if (seq_len <= 13) {
    temp <- ((countA + countT) * 2) + ((countC + countG) * 4)
  } else {
    temp <- 64.9 + (41 * (countG + countC - 16.4)/(countA + countT + countC + countG))
  }
  names(temp) <- "TM in Celcius"
  return(temp)
}
tm_calc(sequence)
tm_calc <- function(sequence, bases = c("A", "T", "C", "G")) {
  base_counts <- bases_count(sequence, bases)
  seq_len <- str_length(sequence)
  countA <- base_counts[1]
  countT <- base_counts[2]
  countC <- base_counts[3]
  countG <- base_counts[4]
  if (seq_len <= 13) {
    temp <- ((countA + countT) * 2) + ((countC + countG) * 4)
  } else {
    temp <- 64.9 + (41 * (countG + countC - 16.4) /
                      (countA + countT + countC + countG))
  }
  names(temp) <- "TM in Celcius"
  return(temp)
}
tm_calc(sequence)
source("genome-functions.R")
q()
library(tidyverse)
q()
q()
library(tidyverse)
q()
sequence
seq <- "gctgatgctagcgaaaattattatgggaatcagccgggtctcactatgtgcaaa"
sequence <- toupper(sequence)
sequence
sequence <- toupper(seq)
sequence
kmer_windws(sequence)
library(stringr)
library(stringi)
kmer_windws(sequence)
sequence <- "GTATGGGAATCAGCCGGGTCTCACTATGTGCAAA"
kmer_windws(sequence, k=3)
seq_len <- str_len(sequence)
seq_len <- str_length(sequence)
seq_
seq_len
sequecne
sequence
seq(1, seq_len + 1 - 3)
seq(3, seq_len)
seq(1, seq_len + 1 - 4, 2)
seq(3, seq_len, 2)
seq(4, seq_len, 2)
q()
combi_kmers <- function(bases = c("A", "T", "C", "G"), k = 2) {
  return(do.call(paste0, expand.grid(rep(list(bases), k))))
}
combi_kmers()
combi_kmers(k = 3)
kmer_windws <- function(sequence, k = 2, s = 1) {
  # 'k' stands for 'kmer' (in this case its equivalent to the window size)
  # 's' stands for 'stride' (spaces taken between each window)
  seq_len <- str_length(sequence)
  return(str_sub(sequence, seq(1, seq_len + 1 - k, s), seq(k, seq_len, s)))
}
sequence
kmer_windws(sequence,k=4,s=2)
library(stringr)
library(stringi)
kmer_windws(sequence,k=4,s=2)
kmer_windws(sequence,k=5,s=3)
q()
