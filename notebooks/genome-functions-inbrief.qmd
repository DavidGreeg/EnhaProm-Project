---
title: Genome Functions to Use Later
format: html
---

## Brief description of each function

### Libraries used
```{r}
# library(stringr)
# library(stringi)
# source("genome-functions.R")
setwd("/home/davidfm/Projects/UBMI-IFC/EnhaProm/")
source("scripts/genome-functions.R")
```

### Example sequences:
```{r}
l_seq <- "gtatgggaatcagccgggtctcactatgtgcaaa"
s_seq <- "gtatgggaat"

long_sequence <- toupper(l_seq)
long_sequence 
short_sequence <- toupper(s_seq)
short_sequence 

testseq1 <- "TGTCCGCTCCAGTCTCTCTTCCTCATCTTATAAAGCCACGAGTCCCA"
testseq2 <- "CTCCAATCAGGACATGAATTCGGGGATTAAATTGCCAACACATGGCT"
testseq3 <- "GTGCAGTGGCGCTATCTCGGCTCACTGCAAGCTGTTCACGCCATTCT"
palindromeseq <- "CAAGCTTGTGCAGTGTTGCTGTTCTATCTCGGCTCACTGCAAGCTGTTCACGCCATGTTCTGTT"
```

### Counts per Base 
Gets counts of each nucleotide in the sequence.
```{r}
bases_count(long_sequence)
bases_count(short_sequence)
```

### Percentage per Base
Gets percentages of each nucleotide in the sequence.
```{r}
bases_percentage(long_sequence)
bases_percentage(short_sequence)
```

### GC Percentage
Sums percentages of cytosine (C) and guanine (G).
```{r}
gc_percentage(long_sequence)
gc_percentage(short_sequence)
```

### Base Highlight
Converts all nucleotides to lower case,
except for the one to highlight.
```{r}
highlight_base(long_sequence, "a")
highlight_base(short_sequence, "a")
```

### Reverse Complementary
Gets the reverse complementary sequence.
```{r}
long_sequence
rev_complement(long_sequence)
short_sequence 
rev_complement(short_sequence)
```

### Kmer Combinations
Gets all combinations of kmers of a given size (k).
```{r}
all_k2 <- combi_kmers()
all_k2
all_k3 <- combi_kmers(k = 3)
all_k3
```

### Counts per Kmer
Counts occurrences of kmers inside sequences,
if 'percentage=TRUE' provides percentages instead.
```{r}
count_kmers(short_sequence)
count_kmers(short_sequence, all_k3)
count_kmers(short_sequence, percentage = TRUE)

another_short_sequence <- "GCGCGCGCATTCGC"
count_kmers(another_short_sequence, c("CG"))
count_kmers(another_short_sequence, c("CGC"))
```

### Kmer Windows
Splits sequences into kmers of a specified size (k).
By default kmers are separated from each other by 1 nucleotide, 
however this separation or "stride" (s), can be also specified.
```{r}
short_sequence 
kmer_windows(short_sequence)
kmer_windows(short_sequence, k = 3)
testseq1
kmer_windows(testseq1, k=8)
kmer_windows(testseq1, k=8, s=3)
k3_tseq1 <- kmer_windows(testseq1, k = 3)
```

### TM Calculation
Gets Melting Temperature of a sequence,
inpendent of its length. I'd call it a 
fancier GC% metric.
```{r}
tm_calc(short_sequence)
tm_calc(long_sequence)
```

#### TM Calculation (Sequence Length less than 14 bp)
Gets Melting Temperature of "short" sequences 
```{r}
tm_len_lt14(short_sequence)
```
#### TM Calculation (Sequence Length more than 13 bp)
Gets Melting Temperature of "long" sequences 
```{r}
tm_len_mt13(long_sequence)
```

### Shannon Entropy Calculation
Gets Shannon Entropy of a sequence.
Basically how entropic is a sequence given how many
characters it has and what are their proportions 
relative to the total number of characters.
```{r}
# Note: Add longer explanation of Shannon Entropy
shannon_entropy(testseq1)
shannon_entropy(testseq2)
```

### Kmer Barcode
While thinking of a way of representing the positions
of each kmer inside the whole sequence I first tried to
use their positions as a binary code to then get the sum
of all. 

However 2^x grows a lot with just a few values. Considering 
I wanted to characterize more than 100 positions this was 
unfeasible with 2^x. 

Somehow I thought about using a product of "prime numbers"
given their property of having no other factors except for
themselves and 1 and the fact that they don't double each
other with each position. And altough the results were
manageable, I still thought they were a little too big
for my convinience, so I thought of getting the 'log()'
of the final product.

That's when I realized that my first approximation was not
that bad after all since I could just change 2 to 1.1 or 1.01
or 1.001 (and so on...) to module the growth rate I desired 
for them sequence positions.

After all I implemented all 3 of implementations (named:
"primes", "logprimes" and "expsum"(left as default)).
```{r}
which(k3_tseq1 == "TCT")
1.001^(which(k3_tseq1 == "TCT") - 1)
# All indexes are rested 1 so that we can also 
# use 1.001^0=1 as a first possible position
kmer_barcode(kmer = "TCT", windows = k3_tseq1)
```

# Functions per Windows
At first I called it a fancier 'lapply()', however
later on, it became to make a more efficient way of 
feeding sequence data to my own functions 
(i.e. kmer_barcode())
```{r}
k8_tseq1 <- kmer_windows(testseq1, k = 8)
func_per_windows(windows = k8_tseq1,func = tm_calc)
func_per_windows(windows = k8_tseq1,func = shannon_entropy) 
func_per_windows(kmers = all_k3, windows = k3_tseq1, func = kmer_barcode)
```


```{r}
start_time <- Sys.time()
func_per_windows(windows = k8_tseq1, func = shannon_entropy) 
round(Sys.time() - start_time, 2)
```


```{r}
library(primes)

```
